可用的文件IO函数--打开、读、写等。
linux大多数文件IO只需用到5个函数：open read write lseek close，然后说明**不同缓冲区长度对read和write函数的影响**。
本章所说的函数被称为不带缓冲的IO，与标准IO相对应，它是指每次read和write时立即调用内核中的系统调用。
涉及到多个进程间共享资源，原子操作的概念就变得非常重要。将通过文件IO和open函数的参数来讨论此概念。

# 文件描述符
所有打开的文件都通过文件描述符引用。它是一个非负整数，当打开或创建时一个文件时，内核向进程返回一个文件描述符。

ssize_t read(int fd, void *buf, size_t count);  // 从fd读取count字节大小到buf中
ssize_t write(int fd, const void *buf, size_t count); // 从buf中取count字节大小写到fd中


# 文件共享
(1) 每个进程在进程表中有一个记录项，记录项中包含一张打开文件描述符表，每个文件描述符占用一项
(2) 内核为所有打开文件维持一张文件表
(3) 每个打开文件(或设备)都有一个v节点结构。

打开文件描述符表可存放在用户空间，而非进程表中。

两个独立进程各自打开了同一个文件，则有两个文件描述符表，却只有一个v节点表。
一个进程删除或重命名文件时，另一个文件能立即感知到吗？

ps:
文件io函数针对文件描述符，而标准io是围绕流进行的。
经常使用的都是标准IO，其有缓冲区，有三种缓冲模式：全缓冲、行缓冲和无缓冲。

标准IO的实现


# 原子操作
比如一个进程要做copy文件操作，在它copy时，如果另一个进行也在操作此文件，
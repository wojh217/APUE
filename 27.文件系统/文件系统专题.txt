文件系统
类ls的实现，如myls -l -a -i -n

# 目录和文件（会使用到递归）

	1. 获取文件属性
		cmd --长格式 -短格式 非选项的传参
		如长格式 ls --all 
		如短格式 ls -a
		如果只用短格式，有26个小写字母和26个大写字母， 还可以使用0-9的数字， 则选项共有26*2 + 10个选项
		
		ps: 创建一个名称为-a的文件
		    直接使用touch -a是不成功的，会将-a视为选项而非文件名
			可使用 touch ./-a 或 touch -- -a
			
			ls -l 和 ls -n的区别，-l显示用户名和组名，-n显示用户号和组号
			可通过/etc/passwd和/etc/group查看名称和编号的对应关系
			
		stat fstat lstat 查看文件属性
			int stat(const char *path, struct stat *buf);   // 通过路径获取属性
			int fstat(int fd, struct stat *buf);            // 通过文件描述符fd取属性
			int lstat(const char *path, struct stat *buf);  // 和stat的链接属性不同(面对符号链接文件时，获取的是链接文件的属性)
			
			struct stat {
               dev_t     st_dev;     /* ID of device containing file */  //包含该文件的设备的设备号
               ino_t     st_ino;     /* inode number */                  // inode号
               mode_t    st_mode;    /* protection */                    // 权限信息
               nlink_t   st_nlink;   /* number of hard links */          // 硬链接数
               uid_t     st_uid;     /* user ID of owner */              // owner id
               gid_t     st_gid;     /* group ID of owner */             // group id
               dev_t     st_rdev;    /* device ID (if special file) */   // 如果拿到的是设备，则是设备号
               off_t     st_size;    /* total size, in bytes */          // 文件大小
               blksize_t st_blksize; /* blocksize for file system I/O */ // 一个block的大小，默认为512字节
               blkcnt_t  st_blocks;  /* number of 512B blocks allocated */ // 占用多少个block块
               time_t    st_atime;   /* time of last access */             // 最后一次读的时间
               time_t    st_mtime;   /* time of last modification */       // 最后一次写的时间
               time_t    st_ctime;   /* time of last status change */      // 最后一次亚数据修改的时间
           };
		   
		   
		
		之前有两种方式来获取文件大小（哪两种？），现在通过stat来获取，见flen_with_stat.c文件
		ps:
		   安装tags工具，则可使用【vim -t 系统重定义的数据类型】命令来查看typedine 定义的数据类型， 如vim -t off_t
		
		注意：
			st_size 只是文件的属性，而st_blksize和st_blocks才真正决定占用磁盘空间的大小。
			【空洞文件】有可能文件特别大，但占用磁盘空间特别小， 见test_bigfile.c
			
		st_mode：
			st_mode 包含了ls -l查看的文件类型和文件权限，是一个16位的整形数
			文件类型：dcb-lsp
						d: directory 目录
						c：character 字符设备文件
						b: block 块设备文件
						-: regular 常规文件
						l: link 符号链接文件，硬链接文件是目录项，不会有任何表示？
						s: socket socket文件
						p: pipe 管道文件，这里特指命名管道文件，匿名管道在磁盘上看不到
					  可以用宏判断，也可以按位与操作
		
	2. 文件访问权限
		st_mode是一个16位的位图，用于表示文件类型、文件访问权限及特殊权限位（u+s, t+s, 粘住位）
	3. umask
		创建文件： 0666 & -umask
		umask既是一个命令，也是一个函数，作用防止产生权限过松的文件
	4. 文件权限的更改\管理
		chmod : 作为命令使用 chmod a+x或g+x或u+x或o+x
				作为函数：int chmod(const char *path, mode_t mode);
		fchmod：int fchmod(int fd, mode_t mode);
	5. 粘住位
		t位，保存二进制可执行文件的执行痕迹，现在常用给某个目录设置t位，如/tmp

	6. 文件系统：FAT, UFS系统
		文件系统： 文件或数据的存储和管理
		UFS系统是早期的linux文件系统，开源
		FAT系统是同时期的微软文件系统
		
		FAT16/32：静态单链表， 最大缺陷：一个走向
			承载的文件大小有限制
			分区：为什么要分区，整个物理盘不分区可不可以使用？也可以不分区
			FAT系统的扇区、磁头、mount、umount如何实现的
		
		内存清理：swap交换分区， 换出率、换入率都上升，才表明内存吃紧。
		磁盘碎片整理：整理的是中间映射，不是真正的硬件底层
		
		UFS系统：
			柱面组(块组)
			描述信息 inode位图 块位图 inode节点(结构体数组) 数据块
			
			一个文件几乎所有的信息都存在inode节点中，除了文件名
			12个普通指针，1个一级块指针，1个二级块指针，1个三级块指针
			
			缺陷：小文件不占用过多的磁盘空间，却耗尽了inode
				  也有inode没有用多少，磁盘空间却用尽了
			用inode位图表示inode是否使用
			用块位图表示数据块是否使用
			
				不用比较和判断的情况，取出两个32位无符号的大小情况
				两个数交换（借助tmp数），或者两数异或
				统计一个32位无符号数的二进制表示数中0和1的个数
		
			目录文件：
				放在某个目录下的文件，由目录项（inode + 文件名）组成
			
	7. 硬链接， 符号链接
		（硬链接与目录项是同义词，且建立硬链接有限制，不能给分区建立，不能给目录建立）
		（符号链接可以跨分区，可以给目录建立链接）
		
		硬链接：ln source des
			创建一个硬链接，就是在目录文件中创建一个目录项，其inode号和原来相同，删除一个后另外一个仍能正常使用
			硬链接文件和原文件的属性均相同
			
		符号链接： ln -s source des
			类似于快捷方式，拥有自己的inode号，不占用磁盘空间，其size为指向文件的文件名长度
			删除原文件，符号链接文件不可用
			
		int link(const char *oldpath, const char *newpath); // 由此封装的ln
			
		int unlink(const char *pathname); // 可用来创建临时文件 open后立即执行unlink
										  // 用来删除文件名？但磁盘空间不一定真正删除
										  
		int remove(const char *pathname); // 由此封装的rm命令
		
		int rename(const char *oldpath, const char *newpath); // 封装的mv命令
		
	8. 更改时间utime
		int utime(const char *filename, const struct utimbuf *times); // 更改文件的最后读atime和最后写mtime， 不常用
		struct utimbuf {
               time_t actime;       /* access time */
               time_t modtime;      /* modification time */
           };
	
	9. 目录的创建和销毁
		mkdir 
			int mkdir(const char *pathname, mode_t mode);
		rmdir
			int rmdir(const char *pathname); // 删除空目录
	10. 更改当前工作路径
		int chdir(const char *path); // 封装出cd命令
		int fchdir(int fd);
		
		长时间运行的进程一般放在根目录
		
		chroot假根技术
		getcwd char *getcwd(char *buf, size_t size); // 封装出pwd
		
	11. 分析目录/读取目录内容
		glob(): 解析模式/通配符,使用见glob.c
			int glob(const char *pattern, int flags,
                int (*errfunc) (const char *epath, int eerrno),
                glob_t *pglob);
				//pattern: 带通配符的模式
			void globfree(glob_t *pglob);
			
			typedef struct {
               size_t   gl_pathc;    /* Count of paths matched so far  */
               char   **gl_pathv;    /* List of matched pathnames.  */
               size_t   gl_offs;     /* Slots to reserve in gl_pathv.  */
           } glob_t;
		   
		   glob_t特别像argc和argv,一个表示数量，一个表示文件名。
		   
		   
			
		
		opendir(): 使用见opendir.c
			DIR *opendir(const char *name); //通过名字打开dir
			DIR *fdopendir(int fd);			//通过fd(即open函数打开后得到的文件描述符)打开dir
			这两个函数成功返回都返回一个目录流的指针，失败返回NULL。
			（返回的指针指向的内容存在堆上）
		closedir()
		readdir()
			struct dirent *readdir(DIR *dirp); // （返回的指针指向的内容存在静态区上）
			int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result); // 函数名加r表示重订版
			
			struct dirent {
               ino_t          d_ino;       /* inode number */
               off_t          d_off;       /* not an offset; see NOTES */
               unsigned short d_reclen;    /* length of this record */
               unsigned char  d_type;      /* type of file; not supported
                                              by all file system types */
               char           d_name[256]; /* filename */
           };
		rewinddir()
		seekdir()
		telldir()
	12. 目录解析的具体实现，需要使用到递归, 见mydu.c
		[root@localhost FILE]# ll
		总用量 72
		-rwxr-xr-x 1 root root       8864 3月  10 10:35 flen_with_stat
		文件类型 权限 硬连接数 【owner】 【group】 size 【时间】 文件名
		
		如果一个变量的使用完全在递归点之前或之后，该变量可以放在静态区；如果该变量跨递归点使用，则只能是auto类型。
		mydu.c中使用了递归，可以使用递归优化，将不参与递归的变量设置为static静态变量
		
	
# 系统数据文件和信息

# 进程环境